name: Deploy Blog

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  deploy:
    # Split out staging/dev later.
    # environment: ${{ github.event_name == 'release' && 'production' || 'dev' }}
    environment: 'dev' # Nix ASAP. Testing purposes only. Trying to see if above logic was faling.
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    # Initial AWS auth (using OIDC with a basic role)
    - name: Configure initial AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_PARAMETER_ROLE_ARN }}
        aws-region: us-east-2

  
        # Test AWS CLI availability
    - name: Test AWS CLI 0
      run: |
        which aws
        aws --version
        aws sts get-caller-identity
    
    # Pull config from Parameter Store (including the main role ARN)
    - name: Get configuration from Parameter Store
      run: |
        echo "Environment: '${{ github.job_environment }}'"
        echo "Event name: ${{ github.event_name }}"
        echo "Expected path: /blog/${{ github.job_environment }}/deployment/github-actions-role"
        
        BLOG_ROLE_ARN=$(aws ssm get-parameter --name "/blog/${{ github.job_environment }}/deployment/github-actions-role" --query "Parameter.Value" --output text)
        BLOG_BUCKET=$(aws ssm get-parameter --name "/blog/${{ github.job_environment }}/content/s3-bucket" --query "Parameter.Value" --output text)
        CLOUDFRONT_ID=$(aws ssm get-parameter --name "/blog/${{ github.job_environment }}/content/cloudfront-distribution-id" --query "Parameter.Value" --output text)
        DOMAIN_NAME=$(aws ssm get-parameter --name "/blog/${{ github.job_environment }}/content/domain-name" --query "Parameter.Value" --output text)
        
        echo "BLOG_ROLE_ARN=$BLOG_ROLE_ARN" >> $GITHUB_ENV
        echo "BLOG_BUCKET=$BLOG_BUCKET" >> $GITHUB_ENV
        echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
        echo "DOMAIN_NAME=$DOMAIN_NAME" >> $GITHUB_ENV
    
    # Re-configure with the blog-specific role
    - name: Configure blog AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.BLOG_ROLE_ARN }}
        aws-region: us-east-2
    
    # Test AWS CLI availability
    - name: Test AWS CLI
      run: |
        which aws
        aws --version
        aws sts get-caller-identity

    # # Install Hugo
    # - name: Setup Hugo
    #   uses: peaceiris/actions-hugo@v2
    #   with:
    #     hugo-version: '0.128.0'
    #     extended: true
    
    # # Build site with commit hash
    # - name: Build site with commit hash
    #   run: |
    #     # Add commit hash to hugo config
    #     echo "" >> hugo.toml
    #     echo "# Build metadata" >> hugo.toml
    #     echo "commit_hash = \"${{ github.sha }}\"" >> hugo.toml
    #     
    #     # Build site, omitting drafts/future for releases
    #     if [[ "${{ github.event_name }}" == "release" ]]; then
    #       hugo --minify
    #     else
    #       hugo --minify --buildDrafts --buildFuture
    #     fi
    
    # # Pre-cache current index
    # - name: Pre-cache current index
    #   run: curl -s https://${{ env.DOMAIN_NAME }}/ > /dev/null || true

    # # Deploy to S3
    # - name: Deploy to S3
    #   run: aws s3 sync ./public/ s3://${{ env.BLOG_BUCKET }}/ --delete

    # # Verify S3 deployment
    # - name: Verify S3 deployment
    #   run: |
    #     S3_HASH=$(aws s3 cp s3://${{ env.BLOG_BUCKET }}/index.html - | grep -o 'commit_hash = "[^"]*"' | cut -d'"' -f2)
    #     if [ "$S3_HASH" != "${{ github.sha }}" ]; then 
    #       echo "S3 deployment failed - hash mismatch: expected ${{ github.sha }}, got $S3_HASH"
    #       exit 1
    #     fi
    #     echo "S3 deployment verified - commit hash matches"

    # # Invalidate CloudFront
    # - name: Invalidate CloudFront
    #   run: |
    #     INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_ID }} --paths "/*" --query 'Invalidation.Id' --output text)
    #     echo "CloudFront invalidation created: $INVALIDATION_ID"

    # # Verify deployment
    # - name: Verify deployment
    #   run: |
    #     echo "Waiting 30 seconds for CloudFront invalidation..."
    #     sleep 30
    #     DEPLOYED_HASH=$(curl -s https://${{ env.DOMAIN_NAME }}/ | grep -o 'commit_hash = "[^"]*"' | cut -d'"' -f2)
    #     if [ "$DEPLOYED_HASH" != "${{ github.sha }}" ]; then 
    #       echo "Deployment verification failed - hash mismatch: expected ${{ github.sha }}, got $DEPLOYED_HASH"
    #       exit 1
    #     fi
    #     echo "Deployment verified successfully - site is live with new content"
